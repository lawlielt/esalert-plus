- name: cluster_health
  interval: "*/60 * * * *"
  search_index: ".monitoring-es-7-*"
  search_type: "doc"
  metadata:
    not_green_secs: 60
  search: {
    "size": 0,
    "query": {
      "bool": {
        "filter": {
          "bool": {
            "must": [
            {
              "range": {
                "timestamp": {
                  "gte": "now-{{.Metadata.not_green_secs}}s"
                }
              }
            },
            {
              "term": {
                "type": "cluster_stats"
              }
            }
            ]
          }
        }
      }
    },
    "aggs": {
      "clusters": {
        "terms": {
          "field": "cluster_uuid",
          "size": 100
        },
        "aggs": {
          "cluster_state": {
            "filters": {
              "filters": {
                "yellow": {
                  "term": {
                    "cluster_state.status": "yellow"
                  }
                },
                "red": {
                  "term": {
                    "cluster_state.status": "red"
                  }
                },
                "green": {
                  "term": {
                    "cluster_state.status": "green"
                  }
                }
              }
            }
          },
          "latest_state": {
            "top_hits": {
              "size": 1,
              "sort": [
              {
                "timestamp": {
                  "order": "desc"
                }
              }
              ]
            }
          }
        }
      }
    }
  }
  throttle_period: "3m"
  process:
    lua_inline: |
      function serialize(obj)
                local lua = ""
                local t = type(obj)
                if t == "number" then
                    lua = lua .. obj
                elseif t == "boolean" then
                    lua = lua .. tostring(obj)
                elseif t == "string" then
                    lua = lua .. string.format("%q", obj)
                elseif t == "table" then
                    lua = lua .. "{\n"
                for k, v in pairs(obj) do
                    lua = lua .. "[" .. serialize(k) .. "]=" .. serialize(v) .. ","
                end
                local metatable = getmetatable(obj)
                    if metatable ~= nil and type(metatable.__index) == "table" then
                    for k, v in pairs(metatable.__index) do
                        lua = lua .. "[" .. serialize(k) .. "]=" .. serialize(v) .. ","
                    end
                end
                    lua = lua .. "}"
                elseif t == "nil" then
                    return nil
                else
                    error("can not serialize a " .. t .. " type.")
                end
                return lua
      end
      if ctx.Aggregations.clusters.buckets == nil then
          return {}
      end
      local actions = {}
      for k, v in pairs(ctx.Aggregations.clusters.buckets) do
          if v.cluster_state.buckets == nil then
              goto continue
          end
          for status, cnt in pairs(v.cluster_state.buckets) do
              if status == "green" then
                  goto continue
              end
              if cnt.doc_count > 0 then
                  local msg = "Clusters that have Not been green for more than {{.Metadata.not_green_secs}}s: " .. v.key .. "[" .. v.latest_state.hits.hits[1]._source.cluster_name .. "] -- "  .. status
                  table.insert(actions, {type="log", message= msg})
                  table.insert(actions, {
                      type="dingding",
                      text="{\"msgtype\": \"text\", \"text\": { \"content\": \"" .. msg .. "\"}}"
                  })
              end
          end
          ::continue::
      end
      return actions